-------------------------------------------------------------------------------------------------------------------------------
                                                        GIT
-------------------------------------------------------------------------------------------------------------------------------
    -SOBRE O GIT-
- GIT trabalha com "fotos" das versões, ou seja, todas as versões são mantidos os arquivos que não sofreram mudanças, e os ar-
quivos que foram alterados são atualizados. 

    -O QUE É GITHUB?-
- GIT e GITHUB são diferentes, pois o GIT é um sistema para controle de versão e o GITHUB apenas um local na web para onde 
você coloca seus projetos vefrsionados em GIT.
-------------------------------------------------------------------------------------------------------------------------------

      CONFIGURAÇÕES INICIAIS DO GIT.
        
- GIT guarda informações em 3 lugares, GITConfig do sistema, do usuário e do projeto especifico do repositório. 

- Definindo username: 
  $ git config --global user.name "Seu Nome"
  
 - Configurando email 
  $ git config --global user.email "seuemail@gmail.com"
  
 - Configurando editor principal do GIT, para digitar mensagem ou mensagem do commit (Senão definir por padrão usa o Vin)
  $ git config --global core.editor 'editor' (ex. Sublime, Vin)
 
 - Para saber o valor:
  $ git config user.name ou user.email
 -------------------------------------------------------------------------------------------------------------------------------
 
 
        ESSENCIAIS DO GIT.
        
 - Inicializando um repositório, onde vamos guardar o arquivos dos projetos.
  1 - criar a pasta: 
    $ mkdir nome-do-projeto
    entrar na pasta criada -> cd nome-do-projeto
    
  2 - Inicializar um repositório para ser considerado parte do sistema do GIT
    $ git init -> inicializa o repositório e ficar enxergando todas as mudanças que estiverem dentro desse projeto.
   
  3 - Usando o editor do terminal, salvar, sair de um arquivo.
    Editar o arquivo:
    $ vi nome-arquivo
    Para começar a editar apertar a letra "i", após escrever tudo apertar "esc" 
    Apertar a tecla ":" para iniciar um comando,"w" para escrever/salvar e o "q" sair e após isso "Enter"
  
  4 - Ciclo de vida dos status dos arquivos.
    O git separa em 4 estados bem definidos como os arquivos vão ser, que são:
       Untracked: O arquivo acabou de ser adicionado no repositório, mas não foi visto pelo GIT. 
       Unmodified: Depois que adiciona no GIT, ou seja, não foi modificado, ele existe no git mas nao teve modificação.
       Modified: Quando voce modificar o arquivo.
       Staged: Depois que modificou, joga o arquivo para uma area que vai criar a versão. Quando a versão for fechada, leva
       arquivos.
       Quando fizer o commit, todos os arquivos que tinha, voltam a ser unnmodified, ou seja já criou a versão com tudo o 
       que você tinha. 
       
    $ git status                 -> Serve para reportar como está o repositório no momento.
    $ git add nome-arquivo       -> adiciona o arquivo para ser committado
    $ git commit -m "Add readme" -> Para commitar e -m para adicionar mensagem ao commit. Sempre informar o que fez no commit
      Mensagem que retorna: 
      [master (root-commit) 2c01cb1] Add ReadMe.md  
       -> Master significa o branch que esta o commit, e o código é uma indentificação da versão.
    $ git commit -a -m            -> Adiciona para o commit até os que não estão no stage.
    
  5 - Visualizando logs
    $ git log                     -> mostra a hash do commit(identificação), o autor da modificação, a data.
    $ git log --decorate          -> mostra algumas informações como por exemplo, de qual branch para qual branch,
      se houve merge. etc..
    $ git log --author="Nome"     -> Lista todos os commits com esse nome de author.
    $ git shortlog                -> Mostra em ordem alfabetica quais os autores, quantos commits fizeram e quais foram.
    $ git log --graph             -> Mostra em grafico o que está acontecendo com os branchs e versões.
    $ git show hash(id do commit) -> Mostra o que aconteceu nesse commit.
    
  6 - Visualizando o diff (Vê as alterações antes do commit)
    $ git diff             -> mostra a alteração 
    $ git diff --name-only -> somente o nome do arquivo que foi modificado.
    
  7 - Desfazendo coisas:
   Sempre escolher o commit anterior do qual você quer, pois o commit que deseja não existirá mais, apenas o anterior.
   
    - Antes de estar pronto para o commit:
    $ git checkout nome-arquivo       -> retorna o arquivo para antes da edição.
    
    - Após estar pronto para o commit:
    $ git reset HEAD nome-arquivo     -> O HEAD serve para tirar do passo em que se encontra o arquivo.
    
    - Após commitar:
    $ git reset --soft OU --mixed OU --hard hash(identificador) -> 
      soft: Pega as modificações e voltar o commit, mas o arquivo vai estar em staged.
      mixed: mata o commit porém volta os arquivos para antes do staged(modified).
      hard: ignora a existencia do commit e tudo o que foi feito nele.
    
 -------------------------------------------------------------------------------------------------------------------------------
    
       REPOSITÓRIO REMOTO
       
 - Criando e adicionando uma chave SSH (SSH protocolo que serve para autenticar usuário remoto ao servidor)
  Precisa-se de 2 etapas, gerar a chave SSH e adicionar no GITHUB:
    -> Abrir https://help.github.com/en/github/authenticating-to-github/generating-a-new-ssh-key-and-adding-it-to-the-ssh-agent
    -> Ir no "Generating a new SSH key" e seguir o passo a passo para gerar a KEY.
    Ir no terminal:
      -> $ ~/.ssh/
      -> $ cat id_rsa.pub ou vi
      -> Copiar a chave do terminal e ir no github 
        -> Settings
        -> SSH AND GPG KEYS
        -> New SSH key e ctrl + v
        -> No título, colocar o nome da maquina.
        
 - Ligando repositório local à um remoto.
   $ git remote add origin(qlqr nome) git@github.com:PedroFavoretti/Learning_Git.git(diretório do seu git)
   $ git remote                           -> lista os repositórios
   $ git remote -v                          -> mais informações, 
   $ git push -u origin(qlqr nome) master -> envia os arquivos que tem pasa um repositorio determinado. -u serve pra crackear
    na proxima so coloca git push.
   
 - Enviando mudanças para um repositório remoto.
  $ git push nomerepositorio 
  
 - Clonando repositórios remotos.
  $ git clone + HTTPS OU SSH do repositório.
 -------------------------------------------------------------------------------------------------------------------------------
    
       RAMIFICAÇÃO (BRANCH)

 - O que é um Branch?
  Um ponteiro móvel que leva ao commit, toda vez que commitamos o git faz uma hash e cada hash uma snap. O branch aponta
  para o commit... O primeiro branch sempre se chamará "Master" e cada vez que fizer um commit o branch master vai seguindo
  os commits, por exemplo se temos 3 commits, com a hash a1, a2, a3 o ultimo commit a3 vai ser o master. E podemos criar
  um novo branch apontando para o mesmo commit, ou um commit diferente.
    Por que usar?
  Podemos modificar arquivos sem alterar o local principal(master), exemplo: Corrigir bug, com pessoas utilizando o master.
  É facilmente "desligavel", facil de se apagar um branch. 

 - Como criar um branch:
  $ git checkout -b nome-do-branch

 - movendo e deletando branch
  $ git branch                   -> listar os branchs
  $ git checkout nome-do-branch  -> utiliza outro branch
  $ git branch -D nome-do-branch -> Apaga o branch

 - Merge
  $ git merge nome-do-branch
   - Para ver o merge feito 
    $ git log --graph 
  
 - Rebase    
  $ git rebase nome-do-branch

-------------------------------------------------------------------------------------------------------------------------------
    
       EXTRAS
 
 - .gitignore
  Quando voce quer ignorar alguns arquivos dentro do repositório, exemplo senhas etc..
  - Criar um arquivo .gitignore 
    $ vi .gitignore
    Dentro do vi escreve o que deseja ignorar. Ex:
    * (Significa "Tudo") .JSON -> OU seja, queremos ignorar tudo que contenha .json
    Podemos também digitar o nome do arquivo especifico que é desejado ignorar. 
  Temos também o https://github.com/github/gitignore que é uma ferramenta que possui um conjunto de .gitignore para um determi-
  nado projeto, por exemplo um projeto em GRUPAL, dentro do .gitignore correspondente aparece os padroes de arquivos que
  costumamos ter em grupal.
 
 - Git stash
  Responsavel por guardar modificações ainda não commitada em uma pasta em que pode ser chamada quando necessário.
  $ git stash
   - Para depois aplicar as mudanças:
   $ git stash apply 
  $ git stash list  -> para mostrar a lista de arquivos que pode ser utilizado.
  $ git stash clear -> Para limpar todos os arquivos stash

 - ALIAS
  $ git config --global alias.o-alias-desejado qual comando deseja utilizar. Exemplo:
  $ git config --global alias.s status
  Agora toda vez q for ver o status é só:
  $ git s

 - Versionando com TAGS
  $ git tag -a número da versao -m "Mensagem"
  $ git tag -a 1.0.0 -m "Primera versão do ambiente"
    Para subir a tag:
    $ git push origin master --tags

 - Git Revert
  mesma coisa que o reset, mas mantem o log.
  $ git revert log

 - Apagando branches e tags remotos
  $ git push origin(qlqrnome) : tags ou branch.





  




























